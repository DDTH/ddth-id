package com.github.ddth.id.redis;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.github.ddth.id.SerialIdGenerator;
import com.github.ddth.id.utils.IdException;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;
import redis.clients.jedis.Protocol;

/**
 * This id generator utilizes Redis (http://redis.io/) to generate serial IDs.
 * 
 * <p>
 * Persistency: IDs generated by this id-generator are persistent (assuming the
 * Redis backend runs in persistent mode).
 * </p>
 * 
 * @author Thanh Nguyen <btnguyen2k@gmail.com>
 * @since 0.1.0
 */
public class RedisIdGenerator extends SerialIdGenerator {

    private static Logger LOGGER = LoggerFactory.getLogger(RedisIdGenerator.class);

    private final static long DEFAULT_TIMEOUT_MS = 10000; // 10 seconds

    /*----------------------------------------------------------------------*/
    /**
     * Creates a new {@link JedisPool}, with default database and timeout.
     * 
     * @param hostAndPort
     *            format {@code host:port}
     * @param password
     * @return
     * @since 0.5.0
     */
    public static JedisPool newJedisPool(String hostAndPort, String password) {
        return newJedisPool(hostAndPort, password, Protocol.DEFAULT_DATABASE, DEFAULT_TIMEOUT_MS);
    }

    /**
     * Creates a new {@link JedisPool}, with specified database and default
     * timeout.
     * 
     * @param hostAndPort
     * @param password
     * @param db
     * @return
     * @since 0.5.0
     */
    public static JedisPool newJedisPool(String hostAndPort, String password, int db) {
        return newJedisPool(hostAndPort, password, db, DEFAULT_TIMEOUT_MS);
    }

    /**
     * Creates a new {@link JedisPool} with default database and specified
     * timeout.
     * 
     * @param hostAndPort
     * @param password
     * @param timeoutMs
     * @return
     * @since 0.5.0
     */
    public static JedisPool newJedisPool(String hostAndPort, String password, long timeoutMs) {
        return newJedisPool(hostAndPort, password, Protocol.DEFAULT_DATABASE, timeoutMs);
    }

    /**
     * Creates a new {@link JedisPool}.
     * 
     * @param hostAndPort
     * @param password
     * @param db
     * @param timeoutMs
     * @return
     * @since 0.5.0
     */
    public static JedisPool newJedisPool(String hostAndPort, String password, int db,
            long timeoutMs) {
        final int maxTotal = Runtime.getRuntime().availableProcessors();
        final int maxIdle = maxTotal / 2;

        JedisPoolConfig poolConfig = new JedisPoolConfig();
        poolConfig.setMaxTotal(maxTotal);
        poolConfig.setMinIdle(1);
        poolConfig.setMaxIdle(maxIdle > 0 ? maxIdle : 1);
        poolConfig.setMaxWaitMillis(timeoutMs);
        // poolConfig.setTestOnBorrow(true);
        poolConfig.setTestWhileIdle(true);

        String[] tokens = hostAndPort.split(":");
        String host = tokens.length > 0 ? tokens[0] : Protocol.DEFAULT_HOST;
        int port = tokens.length > 1 ? Integer.parseInt(tokens[1]) : Protocol.DEFAULT_PORT;
        JedisPool jedisPool = new JedisPool(poolConfig, host, port, Protocol.DEFAULT_TIMEOUT,
                password, db);
        return jedisPool;
    }

    /**
     * Helper method to obtain {@link RedisIdGenerator}.
     * 
     * @param redisHostAndPort
     *            format {@code host:port}
     * @return
     * @since 0.5.0
     */
    public static RedisIdGenerator getInstance(String redisHostAndPort) {
        return getInstance(redisHostAndPort, null);
    }

    /**
     * Helper method to obtain {@link RedisIdGenerator}.
     * 
     * @param redisHostAndPort
     *            format {@code host:port}
     * @param redisPassword
     * @return
     * @since 0.5.0
     */
    public static RedisIdGenerator getInstance(String redisHostAndPort,
            final String redisPassword) {
        StringBuilder key = new StringBuilder();
        key.append(redisHostAndPort).append("|").append(redisPassword);
        try {
            RedisIdGenerator idGen = (RedisIdGenerator) idGenerators.get(key.toString(),
                    new Callable<SerialIdGenerator>() {
                        @Override
                        public SerialIdGenerator call() throws Exception {
                            RedisIdGenerator idGen = new RedisIdGenerator();
                            idGen.setRedisHostAndPort(redisHostAndPort)
                                    .setRedisPassword(redisPassword);
                            idGen.init();
                            return idGen;
                        }
                    });
            return idGen;
        } catch (ExecutionException e) {
            LOGGER.warn(e.getMessage(), e);
            return null;
        }
    }
    /*----------------------------------------------------------------------*/

    private JedisPool jedisPool;
    private boolean myOwnJedisPool = true;
    private String redisHostAndPort = Protocol.DEFAULT_HOST + ":" + Protocol.DEFAULT_PORT;
    private String redisPassword;

    /**
     * Redis' host and port scheme (format {@code host:port}).
     * 
     * @return
     * @since 0.5.0
     */
    public String getRedisHostAndPort() {
        return redisHostAndPort;
    }

    /**
     * Sets Redis' host and port scheme (format {@code host:port}).
     * 
     * @param redisHostAndPort
     * @return
     * @since 0.5.0
     */
    public RedisIdGenerator setRedisHostAndPort(String redisHostAndPort) {
        this.redisHostAndPort = redisHostAndPort;
        return this;
    }

    public String getRedisPassword() {
        return redisPassword;
    }

    public RedisIdGenerator setRedisPassword(String redisPassword) {
        this.redisPassword = redisPassword;
        return this;
    }

    /**
     * @return
     * @since 0.5.0
     */
    protected JedisPool getJedisPool() {
        return jedisPool;
    }

    /**
     * @param jedisPool
     * @return
     * @since 0.5.0
     */
    public RedisIdGenerator setJedisPool(JedisPool jedisPool) {
        if (this.jedisPool != null && myOwnJedisPool) {
            this.jedisPool.destroy();
        }
        this.jedisPool = jedisPool;
        myOwnJedisPool = false;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisIdGenerator init() {
        if (jedisPool == null) {
            jedisPool = newJedisPool(redisHostAndPort, redisPassword);
            myOwnJedisPool = true;
        }
        super.init();
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void destroy() {
        try {
            super.destroy();
        } catch (Exception e) {
            LOGGER.warn(e.getMessage(), e);
        }

        if (jedisPool != null && myOwnJedisPool) {
            try {
                jedisPool.destroy();
            } catch (Exception e) {
                LOGGER.warn(e.getMessage(), e);
            } finally {
                jedisPool = null;
            }
        }
    }

    /**
     * @return
     * @since 0.5.0
     */
    protected Jedis getJedis() {
        try {
            return jedisPool.getResource();
        } catch (Exception e) {
            throw e instanceof IdException ? (IdException) e : new IdException(e);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public long nextId(String namespace) {
        try (Jedis jedis = getJedis()) {
            return jedis.incrBy(namespace, 1);
        } catch (Exception e) {
            throw e instanceof IdException ? (IdException) e : new IdException(e);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public long currentId(String namespace) {
        try (Jedis jedis = getJedis()) {
            return Long.parseLong(jedis.get(namespace));
        } catch (NumberFormatException | NullPointerException e) {
            return 0;
        } catch (Exception e) {
            throw e instanceof IdException ? (IdException) e : new IdException(e);
        }
    }

    /**
     * {@inheritDoc}
     * 
     * @since 0.4.0
     */
    @Override
    public boolean setValue(String namespace, long value) {
        if (value < 0) {
            throw new IdException("Id value must be greater or equal to 0!");
        }
        try (Jedis jedis = getJedis()) {
            String result = jedis.set(namespace, String.valueOf(value));
            return StringUtils.equalsIgnoreCase("ok", result);
        } catch (Exception e) {
            throw e instanceof IdException ? (IdException) e : new IdException(e);
        }
    }
}