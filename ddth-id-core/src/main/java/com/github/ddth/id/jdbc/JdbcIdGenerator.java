package com.github.ddth.id.jdbc;

import java.sql.Connection;
import java.sql.SQLException;
import java.text.MessageFormat;

import javax.sql.DataSource;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.ConcurrencyFailureException;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.SingleConnectionDataSource;

import com.github.ddth.id.SerialIdGenerator;
import com.github.ddth.id.utils.IdException;
import com.zaxxer.hikari.HikariDataSource;

/**
 * This id generator utilizes JDBC to generate serial IDs.
 * 
 * <p>
 * Persistency: IDs generated by this id-generator are persistent (assuming the
 * database backend runs in persistent mode).
 * </p>
 * 
 * @author Thanh Nguyen <btnguyen2k@gmail.com>
 * @since 0.3.0
 */
public class JdbcIdGenerator extends SerialIdGenerator {

    private static Logger LOGGER = LoggerFactory.getLogger(JdbcIdGenerator.class);

    private DataSource dataSource;
    private boolean myOwnDataSource = true;
    private String jdbcDriverClass, jdbcUrl, jdbcUser, jdbcPassword;
    private String initSql, testSql;

    private int concurrency = 4;

    private String tableName;
    private String colName = "id_name";
    private String colValue = "id_value";
    private String sqlInsert, sqlUpdateInc, sqlSelect, sqlUpdateSet;

    public DataSource getDataSource() {
        return dataSource;
    }

    public JdbcIdGenerator setDataSource(DataSource dataSource) {
        if (this.dataSource != null && myOwnDataSource
                && this.dataSource instanceof HikariDataSource) {
            ((HikariDataSource) this.dataSource).close();
        }
        this.dataSource = dataSource;
        myOwnDataSource = false;
        return this;
    }

    /**
     * 
     * @return
     * @since 0.5.0
     */
    public String getJdbcDriverClass() {
        return this.jdbcDriverClass;
    }

    /**
     * 
     * @param jdbcDriverClass
     * @return
     * @since 0.5.0
     */
    public JdbcIdGenerator setJdbcDriverClass(String jdbcDriverClass) {
        this.jdbcDriverClass = jdbcDriverClass;
        return this;
    }

    /**
     * 
     * @return
     * @since 0.5.0
     */
    public String getJdbcUrl() {
        return this.jdbcUrl;
    }

    /**
     * 
     * @param jdbcUrl
     * @return
     * @since 0.5.0
     */
    public JdbcIdGenerator setJdbcUrl(String jdbcUrl) {
        this.jdbcUrl = jdbcUrl;
        return this;
    }

    /**
     * 
     * @return
     * @since 0.5.0
     */
    public String getJdbcUser() {
        return this.jdbcUser;
    }

    /**
     * 
     * @param jdbcUser
     * @return
     * @since 0.5.0
     */
    public JdbcIdGenerator setJdbcUser(String jdbcUser) {
        this.jdbcUser = jdbcUser;
        return this;
    }

    /**
     * 
     * @return
     * @since 0.5.0
     */
    public String getJdbcPassword() {
        return this.jdbcPassword;
    }

    /**
     * 
     * @param jdbcPassword
     * @return
     * @since 0.5.0
     */
    public JdbcIdGenerator setJdbcPassword(String jdbcPassword) {
        this.jdbcPassword = jdbcPassword;
        return this;
    }

    public String getInitSql() {
        return this.initSql;
    }

    public JdbcIdGenerator setInitSql(String initSql) {
        this.initSql = initSql;
        return this;
    }

    public String getTestSql() {
        return this.testSql;
    }

    public JdbcIdGenerator setTestSql(String testSql) {
        this.testSql = testSql;
        return this;
    }

    /**
     * 
     * @return
     * @since 0.5.0
     */
    public int getConcurrency() {
        return concurrency;
    }

    /**
     * 
     * @param concurrency
     * @return
     * @since 0.5.0
     */
    public JdbcIdGenerator setConcurrency(int concurrency) {
        this.concurrency = concurrency;
        if (this.concurrency < 1) {
            this.concurrency = 1;
        }
        return this;
    }

    public String getTableName() {
        return tableName;
    }

    public JdbcIdGenerator setTableName(String tableName) {
        this.tableName = tableName;
        return this;
    }

    public String getTableColumnName() {
        return colName;
    }

    public JdbcIdGenerator setTableColumnName(String colName) {
        this.colName = colName;
        return this;
    }

    public String getTableColumnValue() {
        return colValue;
    }

    public JdbcIdGenerator setTableColumnValue(String colValue) {
        this.colValue = colValue;
        return this;
    }

    protected Connection getDbConnection() {
        try {
            return dataSource.getConnection();
        } catch (Exception e) {
            throw e instanceof IdException ? (IdException) e : new IdException(e);
        }
    }

    protected JdbcTemplate createJdbcTemplate(Connection conn) {
        try {
            return new JdbcTemplate(new SingleConnectionDataSource(conn, true));
        } catch (Exception e) {
            throw e instanceof IdException ? (IdException) e : new IdException(e);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JdbcIdGenerator init() {
        if (dataSource == null) {
            HikariDataSource ds = new HikariDataSource();

            ds.setDriverClassName(jdbcDriverClass);
            ds.setJdbcUrl(jdbcUrl);
            ds.setUsername(jdbcUser);
            ds.setPassword(jdbcPassword);
            ds.setConnectionTimeout(10000);
            ds.setIdleTimeout(900000);
            ds.setMaxLifetime(1800000);
            if (!StringUtils.isBlank(testSql)) {
                ds.setConnectionTestQuery(testSql);
            }
            ds.setValidationTimeout(3000);
            ds.setMaximumPoolSize(concurrency);
            if (!StringUtils.isBlank(initSql)) {
                ds.setConnectionInitSql(initSql);
            }
            ds.setLeakDetectionThreshold(300000);

            this.dataSource = ds;
            myOwnDataSource = true;
        }

        super.init();

        sqlInsert = MessageFormat.format("INSERT INTO {0} ({1}, {2}) VALUES (?, 0)", tableName,
                colName, colValue);
        sqlUpdateInc = MessageFormat.format("UPDATE {0} SET {2}={2}+1 WHERE {1}=?", tableName,
                colName, colValue);
        sqlUpdateSet = MessageFormat.format("UPDATE {0} SET {2}=? WHERE {1}=?", tableName, colName,
                colValue);
        sqlSelect = MessageFormat.format("SELECT {2} FROM {0} WHERE {1}=?", tableName, colName,
                colValue);

        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void destroy() {
        try {
            super.destroy();
        } catch (Exception e) {
            LOGGER.warn(e.getMessage(), e);
        }

        if (myOwnDataSource && dataSource instanceof HikariDataSource) {
            try {
                ((HikariDataSource) dataSource).close();
            } catch (Exception e) {
                LOGGER.warn(e.getMessage(), e);
            } finally {
                dataSource = null;
            }
        }
    }

    private boolean _updateInc(JdbcTemplate jdbcTemplate, String namespace, int numRetries,
            int maxRetries) {
        try {
            try {
                int numRows = jdbcTemplate.update(sqlUpdateInc, namespace);
                return numRows > 0;
            } catch (ConcurrencyFailureException dle) {
                if (numRetries > maxRetries) {
                    throw dle;
                } else {
                    return _updateInc(jdbcTemplate, namespace, numRetries + 1, maxRetries);
                }
            }
        } catch (Exception e) {
            throw e instanceof IdException ? (IdException) e : new IdException(e);
        }
    }

    /**
     * @since 0.4.0
     */
    private boolean _updateSet(JdbcTemplate jdbcTemplate, String namespace, long value,
            int numRetries, int maxRetries) {
        try {
            try {
                int numRows = jdbcTemplate.update(sqlUpdateSet, value, namespace);
                return numRows > 0;
            } catch (ConcurrencyFailureException dle) {
                if (numRetries > maxRetries) {
                    throw dle;
                } else {
                    return _updateSet(jdbcTemplate, namespace, value, numRetries + 1, maxRetries);
                }
            }
        } catch (Exception e) {
            throw e instanceof IdException ? (IdException) e : new IdException(e);
        }
    }

    private final static Long ZERO = new Long(0);

    private Long _select(JdbcTemplate jdbcTemplate, String namespace, int numRetries,
            int maxRetries) {
        try {
            try {
                Long result = jdbcTemplate.queryForObject(sqlSelect, Long.class, namespace);
                return result;
            } catch (EmptyResultDataAccessException e) {
                return ZERO;
            } catch (ConcurrencyFailureException dle) {
                if (numRetries > maxRetries) {
                    throw dle;
                } else {
                    return _select(jdbcTemplate, namespace, numRetries + 1, maxRetries);
                }
            }
        } catch (Exception e) {
            throw e instanceof IdException ? (IdException) e : new IdException(e);
        }
    }

    private boolean _insert(JdbcTemplate jdbcTemplate, final String namespace, final int numRetries,
            final int maxRetries) {
        try {
            try {
                int numRows = jdbcTemplate.update(sqlInsert, namespace);
                return numRows > 0;
            } catch (ConcurrencyFailureException dle) {
                if (numRetries > maxRetries) {
                    throw dle;
                } else {
                    return _insert(jdbcTemplate, namespace, numRetries + 1, maxRetries);
                }
            } catch (DuplicateKeyException e) {
                return true;
            }
        } catch (Exception e) {
            throw e instanceof IdException ? (IdException) e : new IdException(e);
        }
    }

    /**
     * @since 0.3.3
     */
    private long nextId(String namespace, boolean firstRun) {
        // normal case: update & get the value
        try {
            Connection conn = getDbConnection();
            if (conn != null) {
                try {
                    conn.setAutoCommit(false);
                    JdbcTemplate jdbcTemplate = createJdbcTemplate(conn);
                    if (_updateInc(jdbcTemplate, namespace, 0, 3)) {
                        Long result = _select(jdbcTemplate, namespace, 0, 3);
                        conn.commit();
                        return result != null ? result.longValue() : 0;
                    }
                } catch (SQLException e) {
                    conn.rollback();
                    throw e;
                } finally {
                    conn.close();
                }
            } else {
                return -1;
            }
        } catch (Exception e) {
            throw e instanceof IdException ? (IdException) e : new IdException(e);
        }

        if (!firstRun) {
            throw new IdException("Cannot increase id value!");
        }

        // first update failed, the row does not exist in db table, try to
        // insert it
        try {
            Connection conn = getDbConnection();
            if (conn != null) {
                try {
                    conn.setAutoCommit(true);
                    JdbcTemplate jdbcTemplate = createJdbcTemplate(conn);
                    if (!_insert(jdbcTemplate, namespace, 0, 3)) {
                        return -1;
                    }
                } finally {
                    conn.close();
                }
            }
        } catch (Exception e) {
            throw e instanceof IdException ? (IdException) e : new IdException(e);
        }

        // try to get next id again, once
        return nextId(namespace, false);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public long nextId(String namespace) {
        return nextId(namespace, true);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public long currentId(String namespace) {
        try {
            Connection conn = getDbConnection();
            if (conn != null) {
                try {
                    conn.setAutoCommit(true);
                    JdbcTemplate jdbcTemplate = createJdbcTemplate(conn);
                    Long result = _select(jdbcTemplate, namespace, 0, 3);
                    return result != null ? result.longValue() : 0;
                } finally {
                    conn.close();
                }
            } else {
                return -1;
            }
        } catch (Exception e) {
            throw e instanceof IdException ? (IdException) e : new IdException(e);
        }
    }

    /**
     * {@inheritDoc}
     * 
     * @since 0.4.0
     */
    @Override
    public boolean setValue(String namespace, long value) {
        if (value < 0) {
            throw new IdException("Id value must be greater or equal to 0!");
        }
        try {
            Connection conn = getDbConnection();
            if (conn != null) {
                try {
                    conn.setAutoCommit(true);
                    JdbcTemplate jdbcTemplate = createJdbcTemplate(conn);
                    if (_insert(jdbcTemplate, namespace, 0, 3)) {
                        return _updateSet(jdbcTemplate, namespace, value, 0, 3);
                    }
                    return false;
                } finally {
                    conn.close();
                }
            } else {
                return false;
            }
        } catch (Exception e) {
            throw e instanceof IdException ? (IdException) e : new IdException(e);
        }
    }
}